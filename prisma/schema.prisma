generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  password String
  name     String
  role     Role      @default(USER)
  verifyAt DateTime?

  followers  UserFollowers[]
  profile    UserProfiles?
  address    UserAddress?
  activities Activity[]
  sessions   UserSessions[]
  posts      Posts[]
  chats      Chat[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostLikes    PostLikes[]
  PostComments PostComments[]
  Message      Message[]
}

model UserSessions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model PasswordResets {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
}

model Activity {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  type      ActivityType
  userId    String       @db.ObjectId
  user      Users        @relation(fields: [userId], references: [id])
  oldValue  String?
  newValue  String?
  createdAt DateTime     @default(now())
}

model UserProfiles {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  bio          String?
  photo        String?
  coverPhoto   String?
  about        String?
  gender       Gender?
  relationship Relationship?

  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model UserAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  street    String?
  city      String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model UserFollowers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum Relationship {
  MARRIED
  SINGLE
}

enum ActivityType {
  USER_REGISTER
  USER_UPDATE
  POST_LIKE
  POST_COMMENT
  ADMIN_LOGIN
  FORGOT_PASSWORD
  CHANGE_PASSWORD
}

model Posts {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  likes          PostLikes[]
  comments       PostComments[]
  postCategories PostCategories[]
  postTags       PostTags[]
  image          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   Users  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

// PostCategory model (junction table)
model PostCategories {
  id         String @default(auto()) @map("_id") @db.ObjectId
  postId     String @db.ObjectId
  categoryId String @db.ObjectId

  post     Posts      @relation(fields: [postId], references: [id])
  category Categories @relation(fields: [categoryId], references: [id])

  @@id([id])
  @@unique([postId, categoryId])
}

// PostCategories model
model Categories {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  slug   String  @unique
  name   String
  detail String?
  image  String?

  posts PostCategories[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// PostCategory model (junction table)
model PostTags {
  id     String @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId

  post Posts @relation(fields: [postId], references: [id])
  tag  Tags  @relation(fields: [tagId], references: [id])

  @@id([id])
  @@unique([postId, tagId])
}

model Tags {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  PostTags  PostTags[]
}

model PostLikes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   Users  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  Posts  Posts  @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model PostComments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   Users  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  Posts  Posts  @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      Users     @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  partnerId String
  messages  Message[]
}

model Message {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  attachment String?
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())

  author   Users  @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  Chat     Chat   @relation(fields: [chatId], references: [id])
  chatId   String @db.ObjectId
}
